// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.ix.shelters.web;

import ar.com.ix.shelters.model.Localidad;
import ar.com.ix.shelters.model.Shelter;
import ar.com.ix.shelters.model.Tecnico;
import ar.com.ix.shelters.model.TipoNodo;
import ar.com.ix.shelters.web.ShelterBean;
import ar.com.ix.shelters.web.converter.LocalidadConverter;
import ar.com.ix.shelters.web.converter.TecnicoConverter;
import ar.com.ix.shelters.web.converter.TipoNodoConverter;
import ar.com.ix.shelters.web.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect ShelterBean_Roo_ManagedBean {
    
    declare @type: ShelterBean: @ManagedBean(name = "shelterBean");
    
    declare @type: ShelterBean: @SessionScoped;
    
    private String ShelterBean.name = "Shelters";
    
    private Shelter ShelterBean.shelter;
    
    private List<Shelter> ShelterBean.allShelters;
    
    private boolean ShelterBean.dataVisible = false;
    
    private List<String> ShelterBean.columns;
    
    private HtmlPanelGrid ShelterBean.createPanelGrid;
    
    private HtmlPanelGrid ShelterBean.editPanelGrid;
    
    private HtmlPanelGrid ShelterBean.viewPanelGrid;
    
    private boolean ShelterBean.createDialogVisible = false;
    
    @PostConstruct
    public void ShelterBean.init() {
        columns = new ArrayList<String>();
        columns.add("nodo");
        columns.add("codigoSitio");
        columns.add("modelo");
        columns.add("direccion");
        columns.add("observaciones");
    }
    
    public String ShelterBean.getName() {
        return name;
    }
    
    public List<String> ShelterBean.getColumns() {
        return columns;
    }
    
    public List<Shelter> ShelterBean.getAllShelters() {
        return allShelters;
    }
    
    public void ShelterBean.setAllShelters(List<Shelter> allShelters) {
        this.allShelters = allShelters;
    }
    
    public String ShelterBean.findAllShelters() {
        allShelters = Shelter.findAllShelters();
        dataVisible = !allShelters.isEmpty();
        return null;
    }
    
    public boolean ShelterBean.isDataVisible() {
        return dataVisible;
    }
    
    public void ShelterBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid ShelterBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void ShelterBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid ShelterBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void ShelterBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid ShelterBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void ShelterBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid ShelterBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel tipoNodoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        tipoNodoCreateOutput.setFor("tipoNodoCreateInput");
        tipoNodoCreateOutput.setId("tipoNodoCreateOutput");
        tipoNodoCreateOutput.setValue("Tipo Nodo:");
        htmlPanelGrid.getChildren().add(tipoNodoCreateOutput);
        
        AutoComplete tipoNodoCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        tipoNodoCreateInput.setId("tipoNodoCreateInput");
        tipoNodoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.tipoNodo}", TipoNodo.class));
        tipoNodoCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{shelterBean.completeTipoNodo}", List.class, new Class[] { String.class }));
        tipoNodoCreateInput.setDropdown(true);
        tipoNodoCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "tipoNodo", String.class));
        tipoNodoCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{tipoNodo.nombre}", String.class));
        tipoNodoCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{tipoNodo}", TipoNodo.class));
        tipoNodoCreateInput.setConverter(new TipoNodoConverter());
        tipoNodoCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(tipoNodoCreateInput);
        
        Message tipoNodoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tipoNodoCreateInputMessage.setId("tipoNodoCreateInputMessage");
        tipoNodoCreateInputMessage.setFor("tipoNodoCreateInput");
        tipoNodoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tipoNodoCreateInputMessage);
        
        OutputLabel nodoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nodoCreateOutput.setFor("nodoCreateInput");
        nodoCreateOutput.setId("nodoCreateOutput");
        nodoCreateOutput.setValue("Nodo:");
        htmlPanelGrid.getChildren().add(nodoCreateOutput);
        
        InputText nodoCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nodoCreateInput.setId("nodoCreateInput");
        nodoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.nodo}", String.class));
        nodoCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(nodoCreateInput);
        
        Message nodoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nodoCreateInputMessage.setId("nodoCreateInputMessage");
        nodoCreateInputMessage.setFor("nodoCreateInput");
        nodoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nodoCreateInputMessage);
        
        OutputLabel codigoSitioCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        codigoSitioCreateOutput.setFor("codigoSitioCreateInput");
        codigoSitioCreateOutput.setId("codigoSitioCreateOutput");
        codigoSitioCreateOutput.setValue("Codigo Sitio:");
        htmlPanelGrid.getChildren().add(codigoSitioCreateOutput);
        
        InputText codigoSitioCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        codigoSitioCreateInput.setId("codigoSitioCreateInput");
        codigoSitioCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.codigoSitio}", String.class));
        codigoSitioCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(codigoSitioCreateInput);
        
        Message codigoSitioCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        codigoSitioCreateInputMessage.setId("codigoSitioCreateInputMessage");
        codigoSitioCreateInputMessage.setFor("codigoSitioCreateInput");
        codigoSitioCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(codigoSitioCreateInputMessage);
        
        OutputLabel modeloCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        modeloCreateOutput.setFor("modeloCreateInput");
        modeloCreateOutput.setId("modeloCreateOutput");
        modeloCreateOutput.setValue("Modelo:");
        htmlPanelGrid.getChildren().add(modeloCreateOutput);
        
        InputText modeloCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        modeloCreateInput.setId("modeloCreateInput");
        modeloCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.modelo}", String.class));
        modeloCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(modeloCreateInput);
        
        Message modeloCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        modeloCreateInputMessage.setId("modeloCreateInputMessage");
        modeloCreateInputMessage.setFor("modeloCreateInput");
        modeloCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(modeloCreateInputMessage);
        
        OutputLabel direccionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        direccionCreateOutput.setFor("direccionCreateInput");
        direccionCreateOutput.setId("direccionCreateOutput");
        direccionCreateOutput.setValue("Direccion:");
        htmlPanelGrid.getChildren().add(direccionCreateOutput);
        
        InputText direccionCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        direccionCreateInput.setId("direccionCreateInput");
        direccionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.direccion}", String.class));
        direccionCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(direccionCreateInput);
        
        Message direccionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        direccionCreateInputMessage.setId("direccionCreateInputMessage");
        direccionCreateInputMessage.setFor("direccionCreateInput");
        direccionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(direccionCreateInputMessage);
        
        OutputLabel observacionesCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        observacionesCreateOutput.setFor("observacionesCreateInput");
        observacionesCreateOutput.setId("observacionesCreateOutput");
        observacionesCreateOutput.setValue("Observaciones:");
        htmlPanelGrid.getChildren().add(observacionesCreateOutput);
        
        InputText observacionesCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        observacionesCreateInput.setId("observacionesCreateInput");
        observacionesCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.observaciones}", String.class));
        observacionesCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(observacionesCreateInput);
        
        Message observacionesCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        observacionesCreateInputMessage.setId("observacionesCreateInputMessage");
        observacionesCreateInputMessage.setFor("observacionesCreateInput");
        observacionesCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(observacionesCreateInputMessage);
        
        OutputLabel responsableCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        responsableCreateOutput.setFor("responsableCreateInput");
        responsableCreateOutput.setId("responsableCreateOutput");
        responsableCreateOutput.setValue("Responsable:");
        htmlPanelGrid.getChildren().add(responsableCreateOutput);
        
        AutoComplete responsableCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        responsableCreateInput.setId("responsableCreateInput");
        responsableCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.responsable}", Tecnico.class));
        responsableCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{shelterBean.completeResponsable}", List.class, new Class[] { String.class }));
        responsableCreateInput.setDropdown(true);
        responsableCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "responsable", String.class));
        responsableCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{responsable.nombre} #{responsable.domicilio} #{responsable.celular}", String.class));
        responsableCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{responsable}", Tecnico.class));
        responsableCreateInput.setConverter(new TecnicoConverter());
        responsableCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(responsableCreateInput);
        
        Message responsableCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        responsableCreateInputMessage.setId("responsableCreateInputMessage");
        responsableCreateInputMessage.setFor("responsableCreateInput");
        responsableCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(responsableCreateInputMessage);
        
        OutputLabel contactoAperturaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        contactoAperturaCreateOutput.setFor("contactoAperturaCreateInput");
        contactoAperturaCreateOutput.setId("contactoAperturaCreateOutput");
        contactoAperturaCreateOutput.setValue("Contacto Apertura:");
        htmlPanelGrid.getChildren().add(contactoAperturaCreateOutput);
        
        AutoComplete contactoAperturaCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        contactoAperturaCreateInput.setId("contactoAperturaCreateInput");
        contactoAperturaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.contactoApertura}", Tecnico.class));
        contactoAperturaCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{shelterBean.completeContactoApertura}", List.class, new Class[] { String.class }));
        contactoAperturaCreateInput.setDropdown(true);
        contactoAperturaCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "contactoApertura", String.class));
        contactoAperturaCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{contactoApertura.nombre} #{contactoApertura.domicilio} #{contactoApertura.celular}", String.class));
        contactoAperturaCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{contactoApertura}", Tecnico.class));
        contactoAperturaCreateInput.setConverter(new TecnicoConverter());
        contactoAperturaCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(contactoAperturaCreateInput);
        
        Message contactoAperturaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        contactoAperturaCreateInputMessage.setId("contactoAperturaCreateInputMessage");
        contactoAperturaCreateInputMessage.setFor("contactoAperturaCreateInput");
        contactoAperturaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(contactoAperturaCreateInputMessage);
        
        OutputLabel localidadCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        localidadCreateOutput.setFor("localidadCreateInput");
        localidadCreateOutput.setId("localidadCreateOutput");
        localidadCreateOutput.setValue("Localidad:");
        htmlPanelGrid.getChildren().add(localidadCreateOutput);
        
        AutoComplete localidadCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        localidadCreateInput.setId("localidadCreateInput");
        localidadCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.localidad}", Localidad.class));
        localidadCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{shelterBean.completeLocalidad}", List.class, new Class[] { String.class }));
        localidadCreateInput.setDropdown(true);
        localidadCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "localidad", String.class));
        localidadCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{localidad.nombre}", String.class));
        localidadCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{localidad}", Localidad.class));
        localidadCreateInput.setConverter(new LocalidadConverter());
        localidadCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(localidadCreateInput);
        
        Message localidadCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        localidadCreateInputMessage.setId("localidadCreateInputMessage");
        localidadCreateInputMessage.setFor("localidadCreateInput");
        localidadCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(localidadCreateInputMessage);
        
        OutputLabel coordenadasCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        coordenadasCreateOutput.setFor("coordenadasCreateInput");
        coordenadasCreateOutput.setId("coordenadasCreateOutput");
        coordenadasCreateOutput.setValue("Coordenadas:");
        htmlPanelGrid.getChildren().add(coordenadasCreateOutput);
        
        InputText coordenadasCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        coordenadasCreateInput.setId("coordenadasCreateInput");
        coordenadasCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.coordenadas}", String.class));
        coordenadasCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(coordenadasCreateInput);
        
        Message coordenadasCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        coordenadasCreateInputMessage.setId("coordenadasCreateInputMessage");
        coordenadasCreateInputMessage.setFor("coordenadasCreateInput");
        coordenadasCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(coordenadasCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ShelterBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel tipoNodoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        tipoNodoEditOutput.setFor("tipoNodoEditInput");
        tipoNodoEditOutput.setId("tipoNodoEditOutput");
        tipoNodoEditOutput.setValue("Tipo Nodo:");
        htmlPanelGrid.getChildren().add(tipoNodoEditOutput);
        
        AutoComplete tipoNodoEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        tipoNodoEditInput.setId("tipoNodoEditInput");
        tipoNodoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.tipoNodo}", TipoNodo.class));
        tipoNodoEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{shelterBean.completeTipoNodo}", List.class, new Class[] { String.class }));
        tipoNodoEditInput.setDropdown(true);
        tipoNodoEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "tipoNodo", String.class));
        tipoNodoEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{tipoNodo.nombre}", String.class));
        tipoNodoEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{tipoNodo}", TipoNodo.class));
        tipoNodoEditInput.setConverter(new TipoNodoConverter());
        tipoNodoEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(tipoNodoEditInput);
        
        Message tipoNodoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tipoNodoEditInputMessage.setId("tipoNodoEditInputMessage");
        tipoNodoEditInputMessage.setFor("tipoNodoEditInput");
        tipoNodoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tipoNodoEditInputMessage);
        
        OutputLabel nodoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nodoEditOutput.setFor("nodoEditInput");
        nodoEditOutput.setId("nodoEditOutput");
        nodoEditOutput.setValue("Nodo:");
        htmlPanelGrid.getChildren().add(nodoEditOutput);
        
        InputText nodoEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nodoEditInput.setId("nodoEditInput");
        nodoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.nodo}", String.class));
        nodoEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(nodoEditInput);
        
        Message nodoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nodoEditInputMessage.setId("nodoEditInputMessage");
        nodoEditInputMessage.setFor("nodoEditInput");
        nodoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nodoEditInputMessage);
        
        OutputLabel codigoSitioEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        codigoSitioEditOutput.setFor("codigoSitioEditInput");
        codigoSitioEditOutput.setId("codigoSitioEditOutput");
        codigoSitioEditOutput.setValue("Codigo Sitio:");
        htmlPanelGrid.getChildren().add(codigoSitioEditOutput);
        
        InputText codigoSitioEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        codigoSitioEditInput.setId("codigoSitioEditInput");
        codigoSitioEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.codigoSitio}", String.class));
        codigoSitioEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(codigoSitioEditInput);
        
        Message codigoSitioEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        codigoSitioEditInputMessage.setId("codigoSitioEditInputMessage");
        codigoSitioEditInputMessage.setFor("codigoSitioEditInput");
        codigoSitioEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(codigoSitioEditInputMessage);
        
        OutputLabel modeloEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        modeloEditOutput.setFor("modeloEditInput");
        modeloEditOutput.setId("modeloEditOutput");
        modeloEditOutput.setValue("Modelo:");
        htmlPanelGrid.getChildren().add(modeloEditOutput);
        
        InputText modeloEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        modeloEditInput.setId("modeloEditInput");
        modeloEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.modelo}", String.class));
        modeloEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(modeloEditInput);
        
        Message modeloEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        modeloEditInputMessage.setId("modeloEditInputMessage");
        modeloEditInputMessage.setFor("modeloEditInput");
        modeloEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(modeloEditInputMessage);
        
        OutputLabel direccionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        direccionEditOutput.setFor("direccionEditInput");
        direccionEditOutput.setId("direccionEditOutput");
        direccionEditOutput.setValue("Direccion:");
        htmlPanelGrid.getChildren().add(direccionEditOutput);
        
        InputText direccionEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        direccionEditInput.setId("direccionEditInput");
        direccionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.direccion}", String.class));
        direccionEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(direccionEditInput);
        
        Message direccionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        direccionEditInputMessage.setId("direccionEditInputMessage");
        direccionEditInputMessage.setFor("direccionEditInput");
        direccionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(direccionEditInputMessage);
        
        OutputLabel observacionesEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        observacionesEditOutput.setFor("observacionesEditInput");
        observacionesEditOutput.setId("observacionesEditOutput");
        observacionesEditOutput.setValue("Observaciones:");
        htmlPanelGrid.getChildren().add(observacionesEditOutput);
        
        InputText observacionesEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        observacionesEditInput.setId("observacionesEditInput");
        observacionesEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.observaciones}", String.class));
        observacionesEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(observacionesEditInput);
        
        Message observacionesEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        observacionesEditInputMessage.setId("observacionesEditInputMessage");
        observacionesEditInputMessage.setFor("observacionesEditInput");
        observacionesEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(observacionesEditInputMessage);
        
        OutputLabel responsableEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        responsableEditOutput.setFor("responsableEditInput");
        responsableEditOutput.setId("responsableEditOutput");
        responsableEditOutput.setValue("Responsable:");
        htmlPanelGrid.getChildren().add(responsableEditOutput);
        
        AutoComplete responsableEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        responsableEditInput.setId("responsableEditInput");
        responsableEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.responsable}", Tecnico.class));
        responsableEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{shelterBean.completeResponsable}", List.class, new Class[] { String.class }));
        responsableEditInput.setDropdown(true);
        responsableEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "responsable", String.class));
        responsableEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{responsable.nombre} #{responsable.domicilio} #{responsable.celular}", String.class));
        responsableEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{responsable}", Tecnico.class));
        responsableEditInput.setConverter(new TecnicoConverter());
        responsableEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(responsableEditInput);
        
        Message responsableEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        responsableEditInputMessage.setId("responsableEditInputMessage");
        responsableEditInputMessage.setFor("responsableEditInput");
        responsableEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(responsableEditInputMessage);
        
        OutputLabel contactoAperturaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        contactoAperturaEditOutput.setFor("contactoAperturaEditInput");
        contactoAperturaEditOutput.setId("contactoAperturaEditOutput");
        contactoAperturaEditOutput.setValue("Contacto Apertura:");
        htmlPanelGrid.getChildren().add(contactoAperturaEditOutput);
        
        AutoComplete contactoAperturaEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        contactoAperturaEditInput.setId("contactoAperturaEditInput");
        contactoAperturaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.contactoApertura}", Tecnico.class));
        contactoAperturaEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{shelterBean.completeContactoApertura}", List.class, new Class[] { String.class }));
        contactoAperturaEditInput.setDropdown(true);
        contactoAperturaEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "contactoApertura", String.class));
        contactoAperturaEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{contactoApertura.nombre} #{contactoApertura.domicilio} #{contactoApertura.celular}", String.class));
        contactoAperturaEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{contactoApertura}", Tecnico.class));
        contactoAperturaEditInput.setConverter(new TecnicoConverter());
        contactoAperturaEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(contactoAperturaEditInput);
        
        Message contactoAperturaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        contactoAperturaEditInputMessage.setId("contactoAperturaEditInputMessage");
        contactoAperturaEditInputMessage.setFor("contactoAperturaEditInput");
        contactoAperturaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(contactoAperturaEditInputMessage);
        
        OutputLabel localidadEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        localidadEditOutput.setFor("localidadEditInput");
        localidadEditOutput.setId("localidadEditOutput");
        localidadEditOutput.setValue("Localidad:");
        htmlPanelGrid.getChildren().add(localidadEditOutput);
        
        AutoComplete localidadEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        localidadEditInput.setId("localidadEditInput");
        localidadEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.localidad}", Localidad.class));
        localidadEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{shelterBean.completeLocalidad}", List.class, new Class[] { String.class }));
        localidadEditInput.setDropdown(true);
        localidadEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "localidad", String.class));
        localidadEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{localidad.nombre}", String.class));
        localidadEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{localidad}", Localidad.class));
        localidadEditInput.setConverter(new LocalidadConverter());
        localidadEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(localidadEditInput);
        
        Message localidadEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        localidadEditInputMessage.setId("localidadEditInputMessage");
        localidadEditInputMessage.setFor("localidadEditInput");
        localidadEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(localidadEditInputMessage);
        
        OutputLabel coordenadasEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        coordenadasEditOutput.setFor("coordenadasEditInput");
        coordenadasEditOutput.setId("coordenadasEditOutput");
        coordenadasEditOutput.setValue("Coordenadas:");
        htmlPanelGrid.getChildren().add(coordenadasEditOutput);
        
        InputText coordenadasEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        coordenadasEditInput.setId("coordenadasEditInput");
        coordenadasEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.coordenadas}", String.class));
        coordenadasEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(coordenadasEditInput);
        
        Message coordenadasEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        coordenadasEditInputMessage.setId("coordenadasEditInputMessage");
        coordenadasEditInputMessage.setFor("coordenadasEditInput");
        coordenadasEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(coordenadasEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ShelterBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText tipoNodoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoNodoLabel.setId("tipoNodoLabel");
        tipoNodoLabel.setValue("Tipo Nodo:");
        htmlPanelGrid.getChildren().add(tipoNodoLabel);
        
        HtmlOutputText tipoNodoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoNodoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.tipoNodo}", TipoNodo.class));
        tipoNodoValue.setConverter(new TipoNodoConverter());
        htmlPanelGrid.getChildren().add(tipoNodoValue);
        
        HtmlOutputText nodoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nodoLabel.setId("nodoLabel");
        nodoLabel.setValue("Nodo:");
        htmlPanelGrid.getChildren().add(nodoLabel);
        
        HtmlOutputText nodoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nodoValue.setId("nodoValue");
        nodoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.nodo}", String.class));
        htmlPanelGrid.getChildren().add(nodoValue);
        
        HtmlOutputText codigoSitioLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        codigoSitioLabel.setId("codigoSitioLabel");
        codigoSitioLabel.setValue("Codigo Sitio:");
        htmlPanelGrid.getChildren().add(codigoSitioLabel);
        
        HtmlOutputText codigoSitioValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        codigoSitioValue.setId("codigoSitioValue");
        codigoSitioValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.codigoSitio}", String.class));
        htmlPanelGrid.getChildren().add(codigoSitioValue);
        
        HtmlOutputText modeloLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        modeloLabel.setId("modeloLabel");
        modeloLabel.setValue("Modelo:");
        htmlPanelGrid.getChildren().add(modeloLabel);
        
        HtmlOutputText modeloValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        modeloValue.setId("modeloValue");
        modeloValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.modelo}", String.class));
        htmlPanelGrid.getChildren().add(modeloValue);
        
        HtmlOutputText direccionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        direccionLabel.setId("direccionLabel");
        direccionLabel.setValue("Direccion:");
        htmlPanelGrid.getChildren().add(direccionLabel);
        
        HtmlOutputText direccionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        direccionValue.setId("direccionValue");
        direccionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.direccion}", String.class));
        htmlPanelGrid.getChildren().add(direccionValue);
        
        HtmlOutputText observacionesLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        observacionesLabel.setId("observacionesLabel");
        observacionesLabel.setValue("Observaciones:");
        htmlPanelGrid.getChildren().add(observacionesLabel);
        
        HtmlOutputText observacionesValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        observacionesValue.setId("observacionesValue");
        observacionesValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.observaciones}", String.class));
        htmlPanelGrid.getChildren().add(observacionesValue);
        
        HtmlOutputText responsableLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        responsableLabel.setId("responsableLabel");
        responsableLabel.setValue("Responsable:");
        htmlPanelGrid.getChildren().add(responsableLabel);
        
        HtmlOutputText responsableValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        responsableValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.responsable}", Tecnico.class));
        responsableValue.setConverter(new TecnicoConverter());
        htmlPanelGrid.getChildren().add(responsableValue);
        
        HtmlOutputText contactoAperturaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        contactoAperturaLabel.setId("contactoAperturaLabel");
        contactoAperturaLabel.setValue("Contacto Apertura:");
        htmlPanelGrid.getChildren().add(contactoAperturaLabel);
        
        HtmlOutputText contactoAperturaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        contactoAperturaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.contactoApertura}", Tecnico.class));
        contactoAperturaValue.setConverter(new TecnicoConverter());
        htmlPanelGrid.getChildren().add(contactoAperturaValue);
        
        HtmlOutputText localidadLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        localidadLabel.setId("localidadLabel");
        localidadLabel.setValue("Localidad:");
        htmlPanelGrid.getChildren().add(localidadLabel);
        
        HtmlOutputText localidadValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        localidadValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.localidad}", Localidad.class));
        localidadValue.setConverter(new LocalidadConverter());
        htmlPanelGrid.getChildren().add(localidadValue);
        
        HtmlOutputText coordenadasLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        coordenadasLabel.setId("coordenadasLabel");
        coordenadasLabel.setValue("Coordenadas:");
        htmlPanelGrid.getChildren().add(coordenadasLabel);
        
        HtmlOutputText coordenadasValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        coordenadasValue.setId("coordenadasValue");
        coordenadasValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{shelterBean.shelter.coordenadas}", String.class));
        htmlPanelGrid.getChildren().add(coordenadasValue);
        
        return htmlPanelGrid;
    }
    
    public Shelter ShelterBean.getShelter() {
        if (shelter == null) {
            shelter = new Shelter();
        }
        return shelter;
    }
    
    public void ShelterBean.setShelter(Shelter shelter) {
        this.shelter = shelter;
    }
    
    public List<TipoNodo> ShelterBean.completeTipoNodo(String query) {
        List<TipoNodo> suggestions = new ArrayList<TipoNodo>();
        for (TipoNodo tipoNodo : TipoNodo.findAllTipoNodoes()) {
            String tipoNodoStr = String.valueOf(tipoNodo.getNombre());
            if (tipoNodoStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(tipoNodo);
            }
        }
        return suggestions;
    }
    
    public List<Tecnico> ShelterBean.completeResponsable(String query) {
        List<Tecnico> suggestions = new ArrayList<Tecnico>();
        for (Tecnico tecnico : Tecnico.findAllTecnicoes()) {
            String tecnicoStr = String.valueOf(tecnico.getNombre() +  " "  + tecnico.getDomicilio() +  " "  + tecnico.getCelular());
            if (tecnicoStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(tecnico);
            }
        }
        return suggestions;
    }
    
    public List<Tecnico> ShelterBean.completeContactoApertura(String query) {
        List<Tecnico> suggestions = new ArrayList<Tecnico>();
        for (Tecnico tecnico : Tecnico.findAllTecnicoes()) {
            String tecnicoStr = String.valueOf(tecnico.getNombre() +  " "  + tecnico.getDomicilio() +  " "  + tecnico.getCelular());
            if (tecnicoStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(tecnico);
            }
        }
        return suggestions;
    }
    
    public List<Localidad> ShelterBean.completeLocalidad(String query) {
        List<Localidad> suggestions = new ArrayList<Localidad>();
        for (Localidad localidad : Localidad.findAllLocalidads()) {
            String localidadStr = String.valueOf(localidad.getNombre());
            if (localidadStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(localidad);
            }
        }
        return suggestions;
    }
    
    public String ShelterBean.onEdit() {
        return null;
    }
    
    public boolean ShelterBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void ShelterBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String ShelterBean.displayList() {
        createDialogVisible = false;
        findAllShelters();
        return "shelter";
    }
    
    public String ShelterBean.displayCreateDialog() {
        shelter = new Shelter();
        createDialogVisible = true;
        return "shelter";
    }
    
    public String ShelterBean.persist() {
        String message = "";
        if (shelter.getId() != null) {
            shelter.merge();
            message = "message_successfully_updated";
        } else {
            shelter.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Shelter");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllShelters();
    }
    
    public String ShelterBean.delete() {
        shelter.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Shelter");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllShelters();
    }
    
    public void ShelterBean.reset() {
        shelter = null;
        createDialogVisible = false;
    }
    
    public void ShelterBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
