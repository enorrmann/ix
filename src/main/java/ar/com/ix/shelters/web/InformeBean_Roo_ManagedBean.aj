// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.ix.shelters.web;

import ar.com.ix.shelters.model.Informe;
import ar.com.ix.shelters.model.Tecnico;
import ar.com.ix.shelters.model.TipoInforme;
import ar.com.ix.shelters.web.InformeBean;
import ar.com.ix.shelters.web.converter.TecnicoConverter;
import ar.com.ix.shelters.web.converter.TipoInformeConverter;
import ar.com.ix.shelters.web.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect InformeBean_Roo_ManagedBean {
    
    declare @type: InformeBean: @ManagedBean(name = "informeBean");
    
    declare @type: InformeBean: @SessionScoped;
    
    private String InformeBean.name = "Informes";
    
    private Informe InformeBean.informe;
    
    private List<Informe> InformeBean.allInformes;
    
    private boolean InformeBean.dataVisible = false;
    
    private List<String> InformeBean.columns;
    
    private HtmlPanelGrid InformeBean.createPanelGrid;
    
    private HtmlPanelGrid InformeBean.editPanelGrid;
    
    private HtmlPanelGrid InformeBean.viewPanelGrid;
    
    private boolean InformeBean.createDialogVisible = false;
    
    @PostConstruct
    public void InformeBean.init() {
        columns = new ArrayList<String>();
        columns.add("periodo");
        columns.add("linkAlInforme");
    }
    
    public String InformeBean.getName() {
        return name;
    }
    
    public List<String> InformeBean.getColumns() {
        return columns;
    }
    
    public List<Informe> InformeBean.getAllInformes() {
        return allInformes;
    }
    
    public void InformeBean.setAllInformes(List<Informe> allInformes) {
        this.allInformes = allInformes;
    }
    
    public String InformeBean.findAllInformes() {
        allInformes = Informe.findAllInformes();
        dataVisible = !allInformes.isEmpty();
        return null;
    }
    
    public boolean InformeBean.isDataVisible() {
        return dataVisible;
    }
    
    public void InformeBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid InformeBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void InformeBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid InformeBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void InformeBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid InformeBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void InformeBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid InformeBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel tipoInformeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        tipoInformeCreateOutput.setFor("tipoInformeCreateInput");
        tipoInformeCreateOutput.setId("tipoInformeCreateOutput");
        tipoInformeCreateOutput.setValue("Tipo Informe:");
        htmlPanelGrid.getChildren().add(tipoInformeCreateOutput);
        
        AutoComplete tipoInformeCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        tipoInformeCreateInput.setId("tipoInformeCreateInput");
        tipoInformeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{informeBean.informe.tipoInforme}", TipoInforme.class));
        tipoInformeCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{informeBean.completeTipoInforme}", List.class, new Class[] { String.class }));
        tipoInformeCreateInput.setDropdown(true);
        tipoInformeCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "tipoInforme", String.class));
        tipoInformeCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{tipoInforme.tipoInforme}", String.class));
        tipoInformeCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{tipoInforme}", TipoInforme.class));
        tipoInformeCreateInput.setConverter(new TipoInformeConverter());
        tipoInformeCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(tipoInformeCreateInput);
        
        Message tipoInformeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tipoInformeCreateInputMessage.setId("tipoInformeCreateInputMessage");
        tipoInformeCreateInputMessage.setFor("tipoInformeCreateInput");
        tipoInformeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tipoInformeCreateInputMessage);
        
        OutputLabel periodoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        periodoCreateOutput.setFor("periodoCreateInput");
        periodoCreateOutput.setId("periodoCreateOutput");
        periodoCreateOutput.setValue("Periodo:");
        htmlPanelGrid.getChildren().add(periodoCreateOutput);
        
        InputText periodoCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        periodoCreateInput.setId("periodoCreateInput");
        periodoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{informeBean.informe.periodo}", String.class));
        periodoCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(periodoCreateInput);
        
        Message periodoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        periodoCreateInputMessage.setId("periodoCreateInputMessage");
        periodoCreateInputMessage.setFor("periodoCreateInput");
        periodoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(periodoCreateInputMessage);
        
        OutputLabel responsableCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        responsableCreateOutput.setFor("responsableCreateInput");
        responsableCreateOutput.setId("responsableCreateOutput");
        responsableCreateOutput.setValue("Responsable:");
        htmlPanelGrid.getChildren().add(responsableCreateOutput);
        
        AutoComplete responsableCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        responsableCreateInput.setId("responsableCreateInput");
        responsableCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{informeBean.informe.responsable}", Tecnico.class));
        responsableCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{informeBean.completeResponsable}", List.class, new Class[] { String.class }));
        responsableCreateInput.setDropdown(true);
        responsableCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "responsable", String.class));
        responsableCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{responsable.nombre} #{responsable.domicilio} #{responsable.celular}", String.class));
        responsableCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{responsable}", Tecnico.class));
        responsableCreateInput.setConverter(new TecnicoConverter());
        responsableCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(responsableCreateInput);
        
        Message responsableCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        responsableCreateInputMessage.setId("responsableCreateInputMessage");
        responsableCreateInputMessage.setFor("responsableCreateInput");
        responsableCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(responsableCreateInputMessage);
        
        OutputLabel linkAlInformeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        linkAlInformeCreateOutput.setFor("linkAlInformeCreateInput");
        linkAlInformeCreateOutput.setId("linkAlInformeCreateOutput");
        linkAlInformeCreateOutput.setValue("Link Al Informe:");
        htmlPanelGrid.getChildren().add(linkAlInformeCreateOutput);
        
        InputText linkAlInformeCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        linkAlInformeCreateInput.setId("linkAlInformeCreateInput");
        linkAlInformeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{informeBean.informe.linkAlInforme}", String.class));
        linkAlInformeCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(linkAlInformeCreateInput);
        
        Message linkAlInformeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        linkAlInformeCreateInputMessage.setId("linkAlInformeCreateInputMessage");
        linkAlInformeCreateInputMessage.setFor("linkAlInformeCreateInput");
        linkAlInformeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(linkAlInformeCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid InformeBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel tipoInformeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        tipoInformeEditOutput.setFor("tipoInformeEditInput");
        tipoInformeEditOutput.setId("tipoInformeEditOutput");
        tipoInformeEditOutput.setValue("Tipo Informe:");
        htmlPanelGrid.getChildren().add(tipoInformeEditOutput);
        
        AutoComplete tipoInformeEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        tipoInformeEditInput.setId("tipoInformeEditInput");
        tipoInformeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{informeBean.informe.tipoInforme}", TipoInforme.class));
        tipoInformeEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{informeBean.completeTipoInforme}", List.class, new Class[] { String.class }));
        tipoInformeEditInput.setDropdown(true);
        tipoInformeEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "tipoInforme", String.class));
        tipoInformeEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{tipoInforme.tipoInforme}", String.class));
        tipoInformeEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{tipoInforme}", TipoInforme.class));
        tipoInformeEditInput.setConverter(new TipoInformeConverter());
        tipoInformeEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(tipoInformeEditInput);
        
        Message tipoInformeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tipoInformeEditInputMessage.setId("tipoInformeEditInputMessage");
        tipoInformeEditInputMessage.setFor("tipoInformeEditInput");
        tipoInformeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tipoInformeEditInputMessage);
        
        OutputLabel periodoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        periodoEditOutput.setFor("periodoEditInput");
        periodoEditOutput.setId("periodoEditOutput");
        periodoEditOutput.setValue("Periodo:");
        htmlPanelGrid.getChildren().add(periodoEditOutput);
        
        InputText periodoEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        periodoEditInput.setId("periodoEditInput");
        periodoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{informeBean.informe.periodo}", String.class));
        periodoEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(periodoEditInput);
        
        Message periodoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        periodoEditInputMessage.setId("periodoEditInputMessage");
        periodoEditInputMessage.setFor("periodoEditInput");
        periodoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(periodoEditInputMessage);
        
        OutputLabel responsableEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        responsableEditOutput.setFor("responsableEditInput");
        responsableEditOutput.setId("responsableEditOutput");
        responsableEditOutput.setValue("Responsable:");
        htmlPanelGrid.getChildren().add(responsableEditOutput);
        
        AutoComplete responsableEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        responsableEditInput.setId("responsableEditInput");
        responsableEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{informeBean.informe.responsable}", Tecnico.class));
        responsableEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{informeBean.completeResponsable}", List.class, new Class[] { String.class }));
        responsableEditInput.setDropdown(true);
        responsableEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "responsable", String.class));
        responsableEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{responsable.nombre} #{responsable.domicilio} #{responsable.celular}", String.class));
        responsableEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{responsable}", Tecnico.class));
        responsableEditInput.setConverter(new TecnicoConverter());
        responsableEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(responsableEditInput);
        
        Message responsableEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        responsableEditInputMessage.setId("responsableEditInputMessage");
        responsableEditInputMessage.setFor("responsableEditInput");
        responsableEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(responsableEditInputMessage);
        
        OutputLabel linkAlInformeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        linkAlInformeEditOutput.setFor("linkAlInformeEditInput");
        linkAlInformeEditOutput.setId("linkAlInformeEditOutput");
        linkAlInformeEditOutput.setValue("Link Al Informe:");
        htmlPanelGrid.getChildren().add(linkAlInformeEditOutput);
        
        InputText linkAlInformeEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        linkAlInformeEditInput.setId("linkAlInformeEditInput");
        linkAlInformeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{informeBean.informe.linkAlInforme}", String.class));
        linkAlInformeEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(linkAlInformeEditInput);
        
        Message linkAlInformeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        linkAlInformeEditInputMessage.setId("linkAlInformeEditInputMessage");
        linkAlInformeEditInputMessage.setFor("linkAlInformeEditInput");
        linkAlInformeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(linkAlInformeEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid InformeBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText tipoInformeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoInformeLabel.setId("tipoInformeLabel");
        tipoInformeLabel.setValue("Tipo Informe:");
        htmlPanelGrid.getChildren().add(tipoInformeLabel);
        
        HtmlOutputText tipoInformeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoInformeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{informeBean.informe.tipoInforme}", TipoInforme.class));
        tipoInformeValue.setConverter(new TipoInformeConverter());
        htmlPanelGrid.getChildren().add(tipoInformeValue);
        
        HtmlOutputText periodoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        periodoLabel.setId("periodoLabel");
        periodoLabel.setValue("Periodo:");
        htmlPanelGrid.getChildren().add(periodoLabel);
        
        HtmlOutputText periodoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        periodoValue.setId("periodoValue");
        periodoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{informeBean.informe.periodo}", String.class));
        htmlPanelGrid.getChildren().add(periodoValue);
        
        HtmlOutputText responsableLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        responsableLabel.setId("responsableLabel");
        responsableLabel.setValue("Responsable:");
        htmlPanelGrid.getChildren().add(responsableLabel);
        
        HtmlOutputText responsableValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        responsableValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{informeBean.informe.responsable}", Tecnico.class));
        responsableValue.setConverter(new TecnicoConverter());
        htmlPanelGrid.getChildren().add(responsableValue);
        
        HtmlOutputText linkAlInformeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        linkAlInformeLabel.setId("linkAlInformeLabel");
        linkAlInformeLabel.setValue("Link Al Informe:");
        htmlPanelGrid.getChildren().add(linkAlInformeLabel);
        
        HtmlOutputText linkAlInformeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        linkAlInformeValue.setId("linkAlInformeValue");
        linkAlInformeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{informeBean.informe.linkAlInforme}", String.class));
        htmlPanelGrid.getChildren().add(linkAlInformeValue);
        
        return htmlPanelGrid;
    }
    
    public Informe InformeBean.getInforme() {
        if (informe == null) {
            informe = new Informe();
        }
        return informe;
    }
    
    public void InformeBean.setInforme(Informe informe) {
        this.informe = informe;
    }
    
    public List<TipoInforme> InformeBean.completeTipoInforme(String query) {
        List<TipoInforme> suggestions = new ArrayList<TipoInforme>();
        for (TipoInforme tipoInforme : TipoInforme.findAllTipoInformes()) {
            String tipoInformeStr = String.valueOf(tipoInforme.getTipoInforme());
            if (tipoInformeStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(tipoInforme);
            }
        }
        return suggestions;
    }
    
    public List<Tecnico> InformeBean.completeResponsable(String query) {
        List<Tecnico> suggestions = new ArrayList<Tecnico>();
        for (Tecnico tecnico : Tecnico.findAllTecnicoes()) {
            String tecnicoStr = String.valueOf(tecnico.getNombre() +  " "  + tecnico.getDomicilio() +  " "  + tecnico.getCelular());
            if (tecnicoStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(tecnico);
            }
        }
        return suggestions;
    }
    
    public String InformeBean.onEdit() {
        return null;
    }
    
    public boolean InformeBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void InformeBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String InformeBean.displayList() {
        createDialogVisible = false;
        findAllInformes();
        return "informe";
    }
    
    public String InformeBean.displayCreateDialog() {
        informe = new Informe();
        createDialogVisible = true;
        return "informe";
    }
    
    public String InformeBean.persist() {
        String message = "";
        if (informe.getId() != null) {
            informe.merge();
            message = "message_successfully_updated";
        } else {
            informe.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Informe");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllInformes();
    }
    
    public String InformeBean.delete() {
        informe.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Informe");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllInformes();
    }
    
    public void InformeBean.reset() {
        informe = null;
        createDialogVisible = false;
    }
    
    public void InformeBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
