// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.ix.shelters.web;

import ar.com.ix.shelters.model.Relevamiento;
import ar.com.ix.shelters.model.Tecnico;
import ar.com.ix.shelters.web.RelevamientoBean;
import ar.com.ix.shelters.web.converter.TecnicoConverter;
import ar.com.ix.shelters.web.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect RelevamientoBean_Roo_ManagedBean {
    
    declare @type: RelevamientoBean: @ManagedBean(name = "relevamientoBean");
    
    declare @type: RelevamientoBean: @SessionScoped;
    
    private String RelevamientoBean.name = "Relevamientoes";
    
    private Relevamiento RelevamientoBean.relevamiento;
    
    private List<Relevamiento> RelevamientoBean.allRelevamientoes;
    
    private boolean RelevamientoBean.dataVisible = false;
    
    private List<String> RelevamientoBean.columns;
    
    private HtmlPanelGrid RelevamientoBean.createPanelGrid;
    
    private HtmlPanelGrid RelevamientoBean.editPanelGrid;
    
    private HtmlPanelGrid RelevamientoBean.viewPanelGrid;
    
    private boolean RelevamientoBean.createDialogVisible = false;
    
    @PostConstruct
    public void RelevamientoBean.init() {
        columns = new ArrayList<String>();
        columns.add("periodo");
        columns.add("link");
    }
    
    public String RelevamientoBean.getName() {
        return name;
    }
    
    public List<String> RelevamientoBean.getColumns() {
        return columns;
    }
    
    public List<Relevamiento> RelevamientoBean.getAllRelevamientoes() {
        return allRelevamientoes;
    }
    
    public void RelevamientoBean.setAllRelevamientoes(List<Relevamiento> allRelevamientoes) {
        this.allRelevamientoes = allRelevamientoes;
    }
    
    public String RelevamientoBean.findAllRelevamientoes() {
        allRelevamientoes = Relevamiento.findAllRelevamientoes();
        dataVisible = !allRelevamientoes.isEmpty();
        return null;
    }
    
    public boolean RelevamientoBean.isDataVisible() {
        return dataVisible;
    }
    
    public void RelevamientoBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid RelevamientoBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void RelevamientoBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid RelevamientoBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void RelevamientoBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid RelevamientoBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void RelevamientoBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid RelevamientoBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel periodoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        periodoCreateOutput.setFor("periodoCreateInput");
        periodoCreateOutput.setId("periodoCreateOutput");
        periodoCreateOutput.setValue("Periodo:");
        htmlPanelGrid.getChildren().add(periodoCreateOutput);
        
        InputText periodoCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        periodoCreateInput.setId("periodoCreateInput");
        periodoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{relevamientoBean.relevamiento.periodo}", String.class));
        periodoCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(periodoCreateInput);
        
        Message periodoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        periodoCreateInputMessage.setId("periodoCreateInputMessage");
        periodoCreateInputMessage.setFor("periodoCreateInput");
        periodoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(periodoCreateInputMessage);
        
        OutputLabel responsableCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        responsableCreateOutput.setFor("responsableCreateInput");
        responsableCreateOutput.setId("responsableCreateOutput");
        responsableCreateOutput.setValue("Responsable:");
        htmlPanelGrid.getChildren().add(responsableCreateOutput);
        
        AutoComplete responsableCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        responsableCreateInput.setId("responsableCreateInput");
        responsableCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{relevamientoBean.relevamiento.responsable}", Tecnico.class));
        responsableCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{relevamientoBean.completeResponsable}", List.class, new Class[] { String.class }));
        responsableCreateInput.setDropdown(true);
        responsableCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "responsable", String.class));
        responsableCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{responsable.nombre} #{responsable.domicilio} #{responsable.celular} #{responsable.telefonoAlternativo}", String.class));
        responsableCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{responsable}", Tecnico.class));
        responsableCreateInput.setConverter(new TecnicoConverter());
        responsableCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(responsableCreateInput);
        
        Message responsableCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        responsableCreateInputMessage.setId("responsableCreateInputMessage");
        responsableCreateInputMessage.setFor("responsableCreateInput");
        responsableCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(responsableCreateInputMessage);
        
        OutputLabel linkCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        linkCreateOutput.setFor("linkCreateInput");
        linkCreateOutput.setId("linkCreateOutput");
        linkCreateOutput.setValue("Link:");
        htmlPanelGrid.getChildren().add(linkCreateOutput);
        
        InputText linkCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        linkCreateInput.setId("linkCreateInput");
        linkCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{relevamientoBean.relevamiento.link}", String.class));
        linkCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(linkCreateInput);
        
        Message linkCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        linkCreateInputMessage.setId("linkCreateInputMessage");
        linkCreateInputMessage.setFor("linkCreateInput");
        linkCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(linkCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid RelevamientoBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel periodoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        periodoEditOutput.setFor("periodoEditInput");
        periodoEditOutput.setId("periodoEditOutput");
        periodoEditOutput.setValue("Periodo:");
        htmlPanelGrid.getChildren().add(periodoEditOutput);
        
        InputText periodoEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        periodoEditInput.setId("periodoEditInput");
        periodoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{relevamientoBean.relevamiento.periodo}", String.class));
        periodoEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(periodoEditInput);
        
        Message periodoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        periodoEditInputMessage.setId("periodoEditInputMessage");
        periodoEditInputMessage.setFor("periodoEditInput");
        periodoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(periodoEditInputMessage);
        
        OutputLabel responsableEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        responsableEditOutput.setFor("responsableEditInput");
        responsableEditOutput.setId("responsableEditOutput");
        responsableEditOutput.setValue("Responsable:");
        htmlPanelGrid.getChildren().add(responsableEditOutput);
        
        AutoComplete responsableEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        responsableEditInput.setId("responsableEditInput");
        responsableEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{relevamientoBean.relevamiento.responsable}", Tecnico.class));
        responsableEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{relevamientoBean.completeResponsable}", List.class, new Class[] { String.class }));
        responsableEditInput.setDropdown(true);
        responsableEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "responsable", String.class));
        responsableEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{responsable.nombre} #{responsable.domicilio} #{responsable.celular} #{responsable.telefonoAlternativo}", String.class));
        responsableEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{responsable}", Tecnico.class));
        responsableEditInput.setConverter(new TecnicoConverter());
        responsableEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(responsableEditInput);
        
        Message responsableEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        responsableEditInputMessage.setId("responsableEditInputMessage");
        responsableEditInputMessage.setFor("responsableEditInput");
        responsableEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(responsableEditInputMessage);
        
        OutputLabel linkEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        linkEditOutput.setFor("linkEditInput");
        linkEditOutput.setId("linkEditOutput");
        linkEditOutput.setValue("Link:");
        htmlPanelGrid.getChildren().add(linkEditOutput);
        
        InputText linkEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        linkEditInput.setId("linkEditInput");
        linkEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{relevamientoBean.relevamiento.link}", String.class));
        linkEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(linkEditInput);
        
        Message linkEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        linkEditInputMessage.setId("linkEditInputMessage");
        linkEditInputMessage.setFor("linkEditInput");
        linkEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(linkEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid RelevamientoBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText periodoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        periodoLabel.setId("periodoLabel");
        periodoLabel.setValue("Periodo:");
        htmlPanelGrid.getChildren().add(periodoLabel);
        
        HtmlOutputText periodoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        periodoValue.setId("periodoValue");
        periodoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{relevamientoBean.relevamiento.periodo}", String.class));
        htmlPanelGrid.getChildren().add(periodoValue);
        
        HtmlOutputText responsableLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        responsableLabel.setId("responsableLabel");
        responsableLabel.setValue("Responsable:");
        htmlPanelGrid.getChildren().add(responsableLabel);
        
        HtmlOutputText responsableValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        responsableValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{relevamientoBean.relevamiento.responsable}", Tecnico.class));
        responsableValue.setConverter(new TecnicoConverter());
        htmlPanelGrid.getChildren().add(responsableValue);
        
        HtmlOutputText linkLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        linkLabel.setId("linkLabel");
        linkLabel.setValue("Link:");
        htmlPanelGrid.getChildren().add(linkLabel);
        
        HtmlOutputText linkValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        linkValue.setId("linkValue");
        linkValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{relevamientoBean.relevamiento.link}", String.class));
        htmlPanelGrid.getChildren().add(linkValue);
        
        return htmlPanelGrid;
    }
    
    public Relevamiento RelevamientoBean.getRelevamiento() {
        if (relevamiento == null) {
            relevamiento = new Relevamiento();
        }
        return relevamiento;
    }
    
    public void RelevamientoBean.setRelevamiento(Relevamiento relevamiento) {
        this.relevamiento = relevamiento;
    }
    
    public List<Tecnico> RelevamientoBean.completeResponsable(String query) {
        List<Tecnico> suggestions = new ArrayList<Tecnico>();
        for (Tecnico tecnico : Tecnico.findAllTecnicoes()) {
            String tecnicoStr = String.valueOf(tecnico.getNombre() +  " "  + tecnico.getDomicilio() +  " "  + tecnico.getCelular() +  " "  + tecnico.getTelefonoAlternativo());
            if (tecnicoStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(tecnico);
            }
        }
        return suggestions;
    }
    
    public String RelevamientoBean.onEdit() {
        return null;
    }
    
    public boolean RelevamientoBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void RelevamientoBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String RelevamientoBean.displayList() {
        createDialogVisible = false;
        findAllRelevamientoes();
        return "relevamiento";
    }
    
    public String RelevamientoBean.displayCreateDialog() {
        relevamiento = new Relevamiento();
        createDialogVisible = true;
        return "relevamiento";
    }
    
    public String RelevamientoBean.persist() {
        String message = "";
        if (relevamiento.getId() != null) {
            relevamiento.merge();
            message = "message_successfully_updated";
        } else {
            relevamiento.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Relevamiento");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllRelevamientoes();
    }
    
    public String RelevamientoBean.delete() {
        relevamiento.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Relevamiento");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllRelevamientoes();
    }
    
    public void RelevamientoBean.reset() {
        relevamiento = null;
        createDialogVisible = false;
    }
    
    public void RelevamientoBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
