// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.ix.shelters.web;

import ar.com.ix.shelters.model.EstadoTarea;
import ar.com.ix.shelters.model.Shelter;
import ar.com.ix.shelters.model.Tarea;
import ar.com.ix.shelters.model.Tecnico;
import ar.com.ix.shelters.web.TareaBean;
import ar.com.ix.shelters.web.converter.EstadoTareaConverter;
import ar.com.ix.shelters.web.converter.ShelterConverter;
import ar.com.ix.shelters.web.converter.TecnicoConverter;
import ar.com.ix.shelters.web.util.MessageFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect TareaBean_Roo_ManagedBean {
    
    declare @type: TareaBean: @ManagedBean(name = "tareaBean");
    
    declare @type: TareaBean: @SessionScoped;
    
    private String TareaBean.name = "Tareas";
    
    private Tarea TareaBean.tarea;
    
    private List<Tarea> TareaBean.allTareas;
    
    private boolean TareaBean.dataVisible = false;
    
    private List<String> TareaBean.columns;
    
    private HtmlPanelGrid TareaBean.createPanelGrid;
    
    private HtmlPanelGrid TareaBean.editPanelGrid;
    
    private HtmlPanelGrid TareaBean.viewPanelGrid;
    
    private boolean TareaBean.createDialogVisible = false;
    
    @PostConstruct
    public void TareaBean.init() {
        columns = new ArrayList<String>();
        columns.add("descripcion");
        columns.add("fechaInicio");
        columns.add("horaInicio");
        columns.add("fechaFin");
        columns.add("horaFin");
    }
    
    public String TareaBean.getName() {
        return name;
    }
    
    public List<String> TareaBean.getColumns() {
        return columns;
    }
    
    public List<Tarea> TareaBean.getAllTareas() {
        return allTareas;
    }
    
    public void TareaBean.setAllTareas(List<Tarea> allTareas) {
        this.allTareas = allTareas;
    }
    
    public String TareaBean.findAllTareas() {
        allTareas = Tarea.findAllTareas();
        dataVisible = !allTareas.isEmpty();
        return null;
    }
    
    public boolean TareaBean.isDataVisible() {
        return dataVisible;
    }
    
    public void TareaBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid TareaBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void TareaBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid TareaBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void TareaBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid TareaBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void TareaBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid TareaBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel descripcionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descripcionCreateOutput.setFor("descripcionCreateInput");
        descripcionCreateOutput.setId("descripcionCreateOutput");
        descripcionCreateOutput.setValue("Descripcion:");
        htmlPanelGrid.getChildren().add(descripcionCreateOutput);
        
        InputText descripcionCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        descripcionCreateInput.setId("descripcionCreateInput");
        descripcionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareaBean.tarea.descripcion}", String.class));
        descripcionCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(descripcionCreateInput);
        
        Message descripcionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descripcionCreateInputMessage.setId("descripcionCreateInputMessage");
        descripcionCreateInputMessage.setFor("descripcionCreateInput");
        descripcionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descripcionCreateInputMessage);
        
        OutputLabel responsableCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        responsableCreateOutput.setFor("responsableCreateInput");
        responsableCreateOutput.setId("responsableCreateOutput");
        responsableCreateOutput.setValue("Responsable:");
        htmlPanelGrid.getChildren().add(responsableCreateOutput);
        
        AutoComplete responsableCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        responsableCreateInput.setId("responsableCreateInput");
        responsableCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareaBean.tarea.responsable}", Tecnico.class));
        responsableCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{tareaBean.completeResponsable}", List.class, new Class[] { String.class }));
        responsableCreateInput.setDropdown(true);
        responsableCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "responsable", String.class));
        responsableCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{responsable.nombre} #{responsable.domicilio} #{responsable.celular}", String.class));
        responsableCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{responsable}", Tecnico.class));
        responsableCreateInput.setConverter(new TecnicoConverter());
        responsableCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(responsableCreateInput);
        
        Message responsableCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        responsableCreateInputMessage.setId("responsableCreateInputMessage");
        responsableCreateInputMessage.setFor("responsableCreateInput");
        responsableCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(responsableCreateInputMessage);
        
        OutputLabel shelterCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        shelterCreateOutput.setFor("shelterCreateInput");
        shelterCreateOutput.setId("shelterCreateOutput");
        shelterCreateOutput.setValue("Shelter:");
        htmlPanelGrid.getChildren().add(shelterCreateOutput);
        
        AutoComplete shelterCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        shelterCreateInput.setId("shelterCreateInput");
        shelterCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareaBean.tarea.shelter}", Shelter.class));
        shelterCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{tareaBean.completeShelter}", List.class, new Class[] { String.class }));
        shelterCreateInput.setDropdown(true);
        shelterCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "shelter", String.class));
        shelterCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{shelter.nodo} #{shelter.codigoSitio} #{shelter.modelo} #{shelter.direccion}", String.class));
        shelterCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{shelter}", Shelter.class));
        shelterCreateInput.setConverter(new ShelterConverter());
        shelterCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(shelterCreateInput);
        
        Message shelterCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        shelterCreateInputMessage.setId("shelterCreateInputMessage");
        shelterCreateInputMessage.setFor("shelterCreateInput");
        shelterCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(shelterCreateInputMessage);
        
        OutputLabel estadoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        estadoCreateOutput.setFor("estadoCreateInput");
        estadoCreateOutput.setId("estadoCreateOutput");
        estadoCreateOutput.setValue("Estado:");
        htmlPanelGrid.getChildren().add(estadoCreateOutput);
        
        AutoComplete estadoCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        estadoCreateInput.setId("estadoCreateInput");
        estadoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareaBean.tarea.estado}", EstadoTarea.class));
        estadoCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{tareaBean.completeEstado}", List.class, new Class[] { String.class }));
        estadoCreateInput.setDropdown(true);
        estadoCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "estado", String.class));
        estadoCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{estado.nombre}", String.class));
        estadoCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{estado}", EstadoTarea.class));
        estadoCreateInput.setConverter(new EstadoTareaConverter());
        estadoCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(estadoCreateInput);
        
        Message estadoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        estadoCreateInputMessage.setId("estadoCreateInputMessage");
        estadoCreateInputMessage.setFor("estadoCreateInput");
        estadoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(estadoCreateInputMessage);
        
        OutputLabel fechaInicioCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fechaInicioCreateOutput.setFor("fechaInicioCreateInput");
        fechaInicioCreateOutput.setId("fechaInicioCreateOutput");
        fechaInicioCreateOutput.setValue("Fecha Inicio:");
        htmlPanelGrid.getChildren().add(fechaInicioCreateOutput);
        
        Calendar fechaInicioCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        fechaInicioCreateInput.setId("fechaInicioCreateInput");
        fechaInicioCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareaBean.tarea.fechaInicio}", Date.class));
        fechaInicioCreateInput.setNavigator(true);
        fechaInicioCreateInput.setEffect("slideDown");
        fechaInicioCreateInput.setPattern("dd/MM/yyyy");
        fechaInicioCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(fechaInicioCreateInput);
        
        Message fechaInicioCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fechaInicioCreateInputMessage.setId("fechaInicioCreateInputMessage");
        fechaInicioCreateInputMessage.setFor("fechaInicioCreateInput");
        fechaInicioCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fechaInicioCreateInputMessage);
        
        OutputLabel horaInicioCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        horaInicioCreateOutput.setFor("horaInicioCreateInput");
        horaInicioCreateOutput.setId("horaInicioCreateOutput");
        horaInicioCreateOutput.setValue("Hora Inicio:");
        htmlPanelGrid.getChildren().add(horaInicioCreateOutput);
        
        InputText horaInicioCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        horaInicioCreateInput.setId("horaInicioCreateInput");
        horaInicioCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareaBean.tarea.horaInicio}", String.class));
        horaInicioCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(horaInicioCreateInput);
        
        Message horaInicioCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        horaInicioCreateInputMessage.setId("horaInicioCreateInputMessage");
        horaInicioCreateInputMessage.setFor("horaInicioCreateInput");
        horaInicioCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(horaInicioCreateInputMessage);
        
        OutputLabel fechaFinCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fechaFinCreateOutput.setFor("fechaFinCreateInput");
        fechaFinCreateOutput.setId("fechaFinCreateOutput");
        fechaFinCreateOutput.setValue("Fecha Fin:");
        htmlPanelGrid.getChildren().add(fechaFinCreateOutput);
        
        Calendar fechaFinCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        fechaFinCreateInput.setId("fechaFinCreateInput");
        fechaFinCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareaBean.tarea.fechaFin}", Date.class));
        fechaFinCreateInput.setNavigator(true);
        fechaFinCreateInput.setEffect("slideDown");
        fechaFinCreateInput.setPattern("dd/MM/yyyy");
        fechaFinCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(fechaFinCreateInput);
        
        Message fechaFinCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fechaFinCreateInputMessage.setId("fechaFinCreateInputMessage");
        fechaFinCreateInputMessage.setFor("fechaFinCreateInput");
        fechaFinCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fechaFinCreateInputMessage);
        
        OutputLabel horaFinCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        horaFinCreateOutput.setFor("horaFinCreateInput");
        horaFinCreateOutput.setId("horaFinCreateOutput");
        horaFinCreateOutput.setValue("Hora Fin:");
        htmlPanelGrid.getChildren().add(horaFinCreateOutput);
        
        InputText horaFinCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        horaFinCreateInput.setId("horaFinCreateInput");
        horaFinCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareaBean.tarea.horaFin}", String.class));
        horaFinCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(horaFinCreateInput);
        
        Message horaFinCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        horaFinCreateInputMessage.setId("horaFinCreateInputMessage");
        horaFinCreateInputMessage.setFor("horaFinCreateInput");
        horaFinCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(horaFinCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid TareaBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel descripcionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descripcionEditOutput.setFor("descripcionEditInput");
        descripcionEditOutput.setId("descripcionEditOutput");
        descripcionEditOutput.setValue("Descripcion:");
        htmlPanelGrid.getChildren().add(descripcionEditOutput);
        
        InputText descripcionEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        descripcionEditInput.setId("descripcionEditInput");
        descripcionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareaBean.tarea.descripcion}", String.class));
        descripcionEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(descripcionEditInput);
        
        Message descripcionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descripcionEditInputMessage.setId("descripcionEditInputMessage");
        descripcionEditInputMessage.setFor("descripcionEditInput");
        descripcionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descripcionEditInputMessage);
        
        OutputLabel responsableEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        responsableEditOutput.setFor("responsableEditInput");
        responsableEditOutput.setId("responsableEditOutput");
        responsableEditOutput.setValue("Responsable:");
        htmlPanelGrid.getChildren().add(responsableEditOutput);
        
        AutoComplete responsableEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        responsableEditInput.setId("responsableEditInput");
        responsableEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareaBean.tarea.responsable}", Tecnico.class));
        responsableEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{tareaBean.completeResponsable}", List.class, new Class[] { String.class }));
        responsableEditInput.setDropdown(true);
        responsableEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "responsable", String.class));
        responsableEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{responsable.nombre} #{responsable.domicilio} #{responsable.celular}", String.class));
        responsableEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{responsable}", Tecnico.class));
        responsableEditInput.setConverter(new TecnicoConverter());
        responsableEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(responsableEditInput);
        
        Message responsableEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        responsableEditInputMessage.setId("responsableEditInputMessage");
        responsableEditInputMessage.setFor("responsableEditInput");
        responsableEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(responsableEditInputMessage);
        
        OutputLabel shelterEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        shelterEditOutput.setFor("shelterEditInput");
        shelterEditOutput.setId("shelterEditOutput");
        shelterEditOutput.setValue("Shelter:");
        htmlPanelGrid.getChildren().add(shelterEditOutput);
        
        AutoComplete shelterEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        shelterEditInput.setId("shelterEditInput");
        shelterEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareaBean.tarea.shelter}", Shelter.class));
        shelterEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{tareaBean.completeShelter}", List.class, new Class[] { String.class }));
        shelterEditInput.setDropdown(true);
        shelterEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "shelter", String.class));
        shelterEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{shelter.nodo} #{shelter.codigoSitio} #{shelter.modelo} #{shelter.direccion}", String.class));
        shelterEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{shelter}", Shelter.class));
        shelterEditInput.setConverter(new ShelterConverter());
        shelterEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(shelterEditInput);
        
        Message shelterEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        shelterEditInputMessage.setId("shelterEditInputMessage");
        shelterEditInputMessage.setFor("shelterEditInput");
        shelterEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(shelterEditInputMessage);
        
        OutputLabel estadoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        estadoEditOutput.setFor("estadoEditInput");
        estadoEditOutput.setId("estadoEditOutput");
        estadoEditOutput.setValue("Estado:");
        htmlPanelGrid.getChildren().add(estadoEditOutput);
        
        AutoComplete estadoEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        estadoEditInput.setId("estadoEditInput");
        estadoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareaBean.tarea.estado}", EstadoTarea.class));
        estadoEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{tareaBean.completeEstado}", List.class, new Class[] { String.class }));
        estadoEditInput.setDropdown(true);
        estadoEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "estado", String.class));
        estadoEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{estado.nombre}", String.class));
        estadoEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{estado}", EstadoTarea.class));
        estadoEditInput.setConverter(new EstadoTareaConverter());
        estadoEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(estadoEditInput);
        
        Message estadoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        estadoEditInputMessage.setId("estadoEditInputMessage");
        estadoEditInputMessage.setFor("estadoEditInput");
        estadoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(estadoEditInputMessage);
        
        OutputLabel fechaInicioEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fechaInicioEditOutput.setFor("fechaInicioEditInput");
        fechaInicioEditOutput.setId("fechaInicioEditOutput");
        fechaInicioEditOutput.setValue("Fecha Inicio:");
        htmlPanelGrid.getChildren().add(fechaInicioEditOutput);
        
        Calendar fechaInicioEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        fechaInicioEditInput.setId("fechaInicioEditInput");
        fechaInicioEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareaBean.tarea.fechaInicio}", Date.class));
        fechaInicioEditInput.setNavigator(true);
        fechaInicioEditInput.setEffect("slideDown");
        fechaInicioEditInput.setPattern("dd/MM/yyyy");
        fechaInicioEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(fechaInicioEditInput);
        
        Message fechaInicioEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fechaInicioEditInputMessage.setId("fechaInicioEditInputMessage");
        fechaInicioEditInputMessage.setFor("fechaInicioEditInput");
        fechaInicioEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fechaInicioEditInputMessage);
        
        OutputLabel horaInicioEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        horaInicioEditOutput.setFor("horaInicioEditInput");
        horaInicioEditOutput.setId("horaInicioEditOutput");
        horaInicioEditOutput.setValue("Hora Inicio:");
        htmlPanelGrid.getChildren().add(horaInicioEditOutput);
        
        InputText horaInicioEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        horaInicioEditInput.setId("horaInicioEditInput");
        horaInicioEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareaBean.tarea.horaInicio}", String.class));
        horaInicioEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(horaInicioEditInput);
        
        Message horaInicioEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        horaInicioEditInputMessage.setId("horaInicioEditInputMessage");
        horaInicioEditInputMessage.setFor("horaInicioEditInput");
        horaInicioEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(horaInicioEditInputMessage);
        
        OutputLabel fechaFinEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fechaFinEditOutput.setFor("fechaFinEditInput");
        fechaFinEditOutput.setId("fechaFinEditOutput");
        fechaFinEditOutput.setValue("Fecha Fin:");
        htmlPanelGrid.getChildren().add(fechaFinEditOutput);
        
        Calendar fechaFinEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        fechaFinEditInput.setId("fechaFinEditInput");
        fechaFinEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareaBean.tarea.fechaFin}", Date.class));
        fechaFinEditInput.setNavigator(true);
        fechaFinEditInput.setEffect("slideDown");
        fechaFinEditInput.setPattern("dd/MM/yyyy");
        fechaFinEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(fechaFinEditInput);
        
        Message fechaFinEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fechaFinEditInputMessage.setId("fechaFinEditInputMessage");
        fechaFinEditInputMessage.setFor("fechaFinEditInput");
        fechaFinEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fechaFinEditInputMessage);
        
        OutputLabel horaFinEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        horaFinEditOutput.setFor("horaFinEditInput");
        horaFinEditOutput.setId("horaFinEditOutput");
        horaFinEditOutput.setValue("Hora Fin:");
        htmlPanelGrid.getChildren().add(horaFinEditOutput);
        
        InputText horaFinEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        horaFinEditInput.setId("horaFinEditInput");
        horaFinEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareaBean.tarea.horaFin}", String.class));
        horaFinEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(horaFinEditInput);
        
        Message horaFinEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        horaFinEditInputMessage.setId("horaFinEditInputMessage");
        horaFinEditInputMessage.setFor("horaFinEditInput");
        horaFinEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(horaFinEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid TareaBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText descripcionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcionLabel.setId("descripcionLabel");
        descripcionLabel.setValue("Descripcion:");
        htmlPanelGrid.getChildren().add(descripcionLabel);
        
        HtmlOutputText descripcionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcionValue.setId("descripcionValue");
        descripcionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareaBean.tarea.descripcion}", String.class));
        htmlPanelGrid.getChildren().add(descripcionValue);
        
        HtmlOutputText responsableLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        responsableLabel.setId("responsableLabel");
        responsableLabel.setValue("Responsable:");
        htmlPanelGrid.getChildren().add(responsableLabel);
        
        HtmlOutputText responsableValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        responsableValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareaBean.tarea.responsable}", Tecnico.class));
        responsableValue.setConverter(new TecnicoConverter());
        htmlPanelGrid.getChildren().add(responsableValue);
        
        HtmlOutputText shelterLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        shelterLabel.setId("shelterLabel");
        shelterLabel.setValue("Shelter:");
        htmlPanelGrid.getChildren().add(shelterLabel);
        
        HtmlOutputText shelterValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        shelterValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareaBean.tarea.shelter}", Shelter.class));
        shelterValue.setConverter(new ShelterConverter());
        htmlPanelGrid.getChildren().add(shelterValue);
        
        HtmlOutputText estadoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        estadoLabel.setId("estadoLabel");
        estadoLabel.setValue("Estado:");
        htmlPanelGrid.getChildren().add(estadoLabel);
        
        HtmlOutputText estadoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        estadoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareaBean.tarea.estado}", EstadoTarea.class));
        estadoValue.setConverter(new EstadoTareaConverter());
        htmlPanelGrid.getChildren().add(estadoValue);
        
        HtmlOutputText fechaInicioLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fechaInicioLabel.setId("fechaInicioLabel");
        fechaInicioLabel.setValue("Fecha Inicio:");
        htmlPanelGrid.getChildren().add(fechaInicioLabel);
        
        HtmlOutputText fechaInicioValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fechaInicioValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareaBean.tarea.fechaInicio}", Date.class));
        DateTimeConverter fechaInicioValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        fechaInicioValueConverter.setPattern("dd/MM/yyyy");
        fechaInicioValue.setConverter(fechaInicioValueConverter);
        htmlPanelGrid.getChildren().add(fechaInicioValue);
        
        HtmlOutputText horaInicioLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        horaInicioLabel.setId("horaInicioLabel");
        horaInicioLabel.setValue("Hora Inicio:");
        htmlPanelGrid.getChildren().add(horaInicioLabel);
        
        HtmlOutputText horaInicioValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        horaInicioValue.setId("horaInicioValue");
        horaInicioValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareaBean.tarea.horaInicio}", String.class));
        htmlPanelGrid.getChildren().add(horaInicioValue);
        
        HtmlOutputText fechaFinLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fechaFinLabel.setId("fechaFinLabel");
        fechaFinLabel.setValue("Fecha Fin:");
        htmlPanelGrid.getChildren().add(fechaFinLabel);
        
        HtmlOutputText fechaFinValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fechaFinValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareaBean.tarea.fechaFin}", Date.class));
        DateTimeConverter fechaFinValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        fechaFinValueConverter.setPattern("dd/MM/yyyy");
        fechaFinValue.setConverter(fechaFinValueConverter);
        htmlPanelGrid.getChildren().add(fechaFinValue);
        
        HtmlOutputText horaFinLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        horaFinLabel.setId("horaFinLabel");
        horaFinLabel.setValue("Hora Fin:");
        htmlPanelGrid.getChildren().add(horaFinLabel);
        
        HtmlOutputText horaFinValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        horaFinValue.setId("horaFinValue");
        horaFinValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tareaBean.tarea.horaFin}", String.class));
        htmlPanelGrid.getChildren().add(horaFinValue);
        
        return htmlPanelGrid;
    }
    
    public Tarea TareaBean.getTarea() {
        if (tarea == null) {
            tarea = new Tarea();
        }
        return tarea;
    }
    
    public void TareaBean.setTarea(Tarea tarea) {
        this.tarea = tarea;
    }
    
    public List<Tecnico> TareaBean.completeResponsable(String query) {
        List<Tecnico> suggestions = new ArrayList<Tecnico>();
        for (Tecnico tecnico : Tecnico.findAllTecnicoes()) {
            String tecnicoStr = String.valueOf(tecnico.getNombre() +  " "  + tecnico.getDomicilio() +  " "  + tecnico.getCelular());
            if (tecnicoStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(tecnico);
            }
        }
        return suggestions;
    }
    
    public List<Shelter> TareaBean.completeShelter(String query) {
        List<Shelter> suggestions = new ArrayList<Shelter>();
        for (Shelter shelter : Shelter.findAllShelters()) {
            String shelterStr = String.valueOf(shelter.getNodo() +  " "  + shelter.getCodigoSitio() +  " "  + shelter.getModelo() +  " "  + shelter.getDireccion());
            if (shelterStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(shelter);
            }
        }
        return suggestions;
    }
    
    public List<EstadoTarea> TareaBean.completeEstado(String query) {
        List<EstadoTarea> suggestions = new ArrayList<EstadoTarea>();
        for (EstadoTarea estadoTarea : EstadoTarea.findAllEstadoTareas()) {
            String estadoTareaStr = String.valueOf(estadoTarea.getNombre());
            if (estadoTareaStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(estadoTarea);
            }
        }
        return suggestions;
    }
    
    public String TareaBean.onEdit() {
        return null;
    }
    
    public boolean TareaBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void TareaBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String TareaBean.displayList() {
        createDialogVisible = false;
        findAllTareas();
        return "tarea";
    }
    
    public String TareaBean.displayCreateDialog() {
        tarea = new Tarea();
        createDialogVisible = true;
        return "tarea";
    }
    
    public String TareaBean.persist() {
        String message = "";
        if (tarea.getId() != null) {
            tarea.merge();
            message = "message_successfully_updated";
        } else {
            tarea.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Tarea");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllTareas();
    }
    
    public String TareaBean.delete() {
        tarea.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Tarea");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllTareas();
    }
    
    public void TareaBean.reset() {
        tarea = null;
        createDialogVisible = false;
    }
    
    public void TareaBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
