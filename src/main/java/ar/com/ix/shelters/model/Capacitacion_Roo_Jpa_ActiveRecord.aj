// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.ix.shelters.model;

import ar.com.ix.shelters.model.Capacitacion;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Capacitacion_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Capacitacion.entityManager;
    
    public static final List<String> Capacitacion.fieldNames4OrderClauseFilter = java.util.Arrays.asList("titulo", "autor", "descripcion", "fecha", "linkALaCapacitacion");
    
    public static final EntityManager Capacitacion.entityManager() {
        EntityManager em = new Capacitacion().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Capacitacion.countCapacitacions() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Capacitacion o", Long.class).getSingleResult();
    }
    
    public static List<Capacitacion> Capacitacion.findAllCapacitacions() {
        return entityManager().createQuery("SELECT o FROM Capacitacion o", Capacitacion.class).getResultList();
    }
    
    public static List<Capacitacion> Capacitacion.findAllCapacitacions(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Capacitacion o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Capacitacion.class).getResultList();
    }
    
    public static Capacitacion Capacitacion.findCapacitacion(Long id) {
        if (id == null) return null;
        return entityManager().find(Capacitacion.class, id);
    }
    
    public static List<Capacitacion> Capacitacion.findCapacitacionEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Capacitacion o", Capacitacion.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<Capacitacion> Capacitacion.findCapacitacionEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Capacitacion o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Capacitacion.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Capacitacion.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Capacitacion.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Capacitacion attached = Capacitacion.findCapacitacion(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Capacitacion.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Capacitacion.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Capacitacion Capacitacion.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Capacitacion merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
