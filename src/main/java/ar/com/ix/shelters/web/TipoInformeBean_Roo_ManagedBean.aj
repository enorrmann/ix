// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.ix.shelters.web;

import ar.com.ix.shelters.model.TipoInforme;
import ar.com.ix.shelters.web.TipoInformeBean;
import ar.com.ix.shelters.web.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect TipoInformeBean_Roo_ManagedBean {
    
    declare @type: TipoInformeBean: @ManagedBean(name = "tipoInformeBean");
    
    declare @type: TipoInformeBean: @SessionScoped;
    
    private String TipoInformeBean.name = "TipoInformes";
    
    private TipoInforme TipoInformeBean.tipoInforme;
    
    private List<TipoInforme> TipoInformeBean.allTipoInformes;
    
    private boolean TipoInformeBean.dataVisible = false;
    
    private List<String> TipoInformeBean.columns;
    
    private HtmlPanelGrid TipoInformeBean.createPanelGrid;
    
    private HtmlPanelGrid TipoInformeBean.editPanelGrid;
    
    private HtmlPanelGrid TipoInformeBean.viewPanelGrid;
    
    private boolean TipoInformeBean.createDialogVisible = false;
    
    @PostConstruct
    public void TipoInformeBean.init() {
        columns = new ArrayList<String>();
        columns.add("tipoInforme");
    }
    
    public String TipoInformeBean.getName() {
        return name;
    }
    
    public List<String> TipoInformeBean.getColumns() {
        return columns;
    }
    
    public List<TipoInforme> TipoInformeBean.getAllTipoInformes() {
        return allTipoInformes;
    }
    
    public void TipoInformeBean.setAllTipoInformes(List<TipoInforme> allTipoInformes) {
        this.allTipoInformes = allTipoInformes;
    }
    
    public String TipoInformeBean.findAllTipoInformes() {
        allTipoInformes = TipoInforme.findAllTipoInformes();
        dataVisible = !allTipoInformes.isEmpty();
        return null;
    }
    
    public boolean TipoInformeBean.isDataVisible() {
        return dataVisible;
    }
    
    public void TipoInformeBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid TipoInformeBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void TipoInformeBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid TipoInformeBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void TipoInformeBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid TipoInformeBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void TipoInformeBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid TipoInformeBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel tipoInformeCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        tipoInformeCreateOutput.setFor("tipoInformeCreateInput");
        tipoInformeCreateOutput.setId("tipoInformeCreateOutput");
        tipoInformeCreateOutput.setValue("Tipo Informe:");
        htmlPanelGrid.getChildren().add(tipoInformeCreateOutput);
        
        InputText tipoInformeCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        tipoInformeCreateInput.setId("tipoInformeCreateInput");
        tipoInformeCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tipoInformeBean.tipoInforme.tipoInforme}", String.class));
        tipoInformeCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(tipoInformeCreateInput);
        
        Message tipoInformeCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tipoInformeCreateInputMessage.setId("tipoInformeCreateInputMessage");
        tipoInformeCreateInputMessage.setFor("tipoInformeCreateInput");
        tipoInformeCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tipoInformeCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid TipoInformeBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel tipoInformeEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        tipoInformeEditOutput.setFor("tipoInformeEditInput");
        tipoInformeEditOutput.setId("tipoInformeEditOutput");
        tipoInformeEditOutput.setValue("Tipo Informe:");
        htmlPanelGrid.getChildren().add(tipoInformeEditOutput);
        
        InputText tipoInformeEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        tipoInformeEditInput.setId("tipoInformeEditInput");
        tipoInformeEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tipoInformeBean.tipoInforme.tipoInforme}", String.class));
        tipoInformeEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(tipoInformeEditInput);
        
        Message tipoInformeEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tipoInformeEditInputMessage.setId("tipoInformeEditInputMessage");
        tipoInformeEditInputMessage.setFor("tipoInformeEditInput");
        tipoInformeEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tipoInformeEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid TipoInformeBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText tipoInformeLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoInformeLabel.setId("tipoInformeLabel");
        tipoInformeLabel.setValue("Tipo Informe:");
        htmlPanelGrid.getChildren().add(tipoInformeLabel);
        
        HtmlOutputText tipoInformeValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoInformeValue.setId("tipoInformeValue");
        tipoInformeValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{tipoInformeBean.tipoInforme.tipoInforme}", String.class));
        htmlPanelGrid.getChildren().add(tipoInformeValue);
        
        return htmlPanelGrid;
    }
    
    public TipoInforme TipoInformeBean.getTipoInforme() {
        if (tipoInforme == null) {
            tipoInforme = new TipoInforme();
        }
        return tipoInforme;
    }
    
    public void TipoInformeBean.setTipoInforme(TipoInforme tipoInforme) {
        this.tipoInforme = tipoInforme;
    }
    
    public String TipoInformeBean.onEdit() {
        return null;
    }
    
    public boolean TipoInformeBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void TipoInformeBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String TipoInformeBean.displayList() {
        createDialogVisible = false;
        findAllTipoInformes();
        return "tipoInforme";
    }
    
    public String TipoInformeBean.displayCreateDialog() {
        tipoInforme = new TipoInforme();
        createDialogVisible = true;
        return "tipoInforme";
    }
    
    public String TipoInformeBean.persist() {
        String message = "";
        if (tipoInforme.getId() != null) {
            tipoInforme.merge();
            message = "message_successfully_updated";
        } else {
            tipoInforme.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "TipoInforme");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllTipoInformes();
    }
    
    public String TipoInformeBean.delete() {
        tipoInforme.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "TipoInforme");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllTipoInformes();
    }
    
    public void TipoInformeBean.reset() {
        tipoInforme = null;
        createDialogVisible = false;
    }
    
    public void TipoInformeBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
