// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.ix.shelters.web;

import ar.com.ix.shelters.model.Localidad;
import ar.com.ix.shelters.web.LocalidadBean;
import ar.com.ix.shelters.web.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect LocalidadBean_Roo_ManagedBean {
    
    declare @type: LocalidadBean: @ManagedBean(name = "localidadBean");
    
    declare @type: LocalidadBean: @SessionScoped;
    
    private String LocalidadBean.name = "Localidads";
    
    private Localidad LocalidadBean.localidad;
    
    private List<Localidad> LocalidadBean.allLocalidads;
    
    private boolean LocalidadBean.dataVisible = false;
    
    private List<String> LocalidadBean.columns;
    
    private HtmlPanelGrid LocalidadBean.createPanelGrid;
    
    private HtmlPanelGrid LocalidadBean.editPanelGrid;
    
    private HtmlPanelGrid LocalidadBean.viewPanelGrid;
    
    private boolean LocalidadBean.createDialogVisible = false;
    
    @PostConstruct
    public void LocalidadBean.init() {
        columns = new ArrayList<String>();
        columns.add("nombre");
    }
    
    public String LocalidadBean.getName() {
        return name;
    }
    
    public List<String> LocalidadBean.getColumns() {
        return columns;
    }
    
    public List<Localidad> LocalidadBean.getAllLocalidads() {
        return allLocalidads;
    }
    
    public void LocalidadBean.setAllLocalidads(List<Localidad> allLocalidads) {
        this.allLocalidads = allLocalidads;
    }
    
    public String LocalidadBean.findAllLocalidads() {
        allLocalidads = Localidad.findAllLocalidads();
        dataVisible = !allLocalidads.isEmpty();
        return null;
    }
    
    public boolean LocalidadBean.isDataVisible() {
        return dataVisible;
    }
    
    public void LocalidadBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid LocalidadBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void LocalidadBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid LocalidadBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void LocalidadBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid LocalidadBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void LocalidadBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid LocalidadBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nombreCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nombreCreateOutput.setFor("nombreCreateInput");
        nombreCreateOutput.setId("nombreCreateOutput");
        nombreCreateOutput.setValue("Nombre:");
        htmlPanelGrid.getChildren().add(nombreCreateOutput);
        
        InputText nombreCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nombreCreateInput.setId("nombreCreateInput");
        nombreCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{localidadBean.localidad.nombre}", String.class));
        nombreCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(nombreCreateInput);
        
        Message nombreCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nombreCreateInputMessage.setId("nombreCreateInputMessage");
        nombreCreateInputMessage.setFor("nombreCreateInput");
        nombreCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nombreCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid LocalidadBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nombreEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nombreEditOutput.setFor("nombreEditInput");
        nombreEditOutput.setId("nombreEditOutput");
        nombreEditOutput.setValue("Nombre:");
        htmlPanelGrid.getChildren().add(nombreEditOutput);
        
        InputText nombreEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nombreEditInput.setId("nombreEditInput");
        nombreEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{localidadBean.localidad.nombre}", String.class));
        nombreEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(nombreEditInput);
        
        Message nombreEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nombreEditInputMessage.setId("nombreEditInputMessage");
        nombreEditInputMessage.setFor("nombreEditInput");
        nombreEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nombreEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid LocalidadBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nombreLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreLabel.setId("nombreLabel");
        nombreLabel.setValue("Nombre:");
        htmlPanelGrid.getChildren().add(nombreLabel);
        
        HtmlOutputText nombreValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreValue.setId("nombreValue");
        nombreValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{localidadBean.localidad.nombre}", String.class));
        htmlPanelGrid.getChildren().add(nombreValue);
        
        return htmlPanelGrid;
    }
    
    public Localidad LocalidadBean.getLocalidad() {
        if (localidad == null) {
            localidad = new Localidad();
        }
        return localidad;
    }
    
    public void LocalidadBean.setLocalidad(Localidad localidad) {
        this.localidad = localidad;
    }
    
    public String LocalidadBean.onEdit() {
        return null;
    }
    
    public boolean LocalidadBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void LocalidadBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String LocalidadBean.displayList() {
        createDialogVisible = false;
        findAllLocalidads();
        return "localidad";
    }
    
    public String LocalidadBean.displayCreateDialog() {
        localidad = new Localidad();
        createDialogVisible = true;
        return "localidad";
    }
    
    public String LocalidadBean.persist() {
        String message = "";
        if (localidad.getId() != null) {
            localidad.merge();
            message = "message_successfully_updated";
        } else {
            localidad.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Localidad");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllLocalidads();
    }
    
    public String LocalidadBean.delete() {
        localidad.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Localidad");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllLocalidads();
    }
    
    public void LocalidadBean.reset() {
        localidad = null;
        createDialogVisible = false;
    }
    
    public void LocalidadBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
