// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.com.ix.shelters.web;

import ar.com.ix.shelters.model.Ubicacion;
import ar.com.ix.shelters.web.UbicacionBean;
import ar.com.ix.shelters.web.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect UbicacionBean_Roo_ManagedBean {
    
    declare @type: UbicacionBean: @ManagedBean(name = "ubicacionBean");
    
    declare @type: UbicacionBean: @SessionScoped;
    
    private String UbicacionBean.name = "Ubicacions";
    
    private Ubicacion UbicacionBean.ubicacion;
    
    private List<Ubicacion> UbicacionBean.allUbicacions;
    
    private boolean UbicacionBean.dataVisible = false;
    
    private List<String> UbicacionBean.columns;
    
    private HtmlPanelGrid UbicacionBean.createPanelGrid;
    
    private HtmlPanelGrid UbicacionBean.editPanelGrid;
    
    private HtmlPanelGrid UbicacionBean.viewPanelGrid;
    
    private boolean UbicacionBean.createDialogVisible = false;
    
    @PostConstruct
    public void UbicacionBean.init() {
        columns = new ArrayList<String>();
        columns.add("nombre");
        columns.add("descripcion");
    }
    
    public String UbicacionBean.getName() {
        return name;
    }
    
    public List<String> UbicacionBean.getColumns() {
        return columns;
    }
    
    public List<Ubicacion> UbicacionBean.getAllUbicacions() {
        return allUbicacions;
    }
    
    public void UbicacionBean.setAllUbicacions(List<Ubicacion> allUbicacions) {
        this.allUbicacions = allUbicacions;
    }
    
    public String UbicacionBean.findAllUbicacions() {
        allUbicacions = Ubicacion.findAllUbicacions();
        dataVisible = !allUbicacions.isEmpty();
        return null;
    }
    
    public boolean UbicacionBean.isDataVisible() {
        return dataVisible;
    }
    
    public void UbicacionBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid UbicacionBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void UbicacionBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid UbicacionBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void UbicacionBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid UbicacionBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void UbicacionBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid UbicacionBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nombreCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nombreCreateOutput.setFor("nombreCreateInput");
        nombreCreateOutput.setId("nombreCreateOutput");
        nombreCreateOutput.setValue("Nombre:");
        htmlPanelGrid.getChildren().add(nombreCreateOutput);
        
        InputText nombreCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nombreCreateInput.setId("nombreCreateInput");
        nombreCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{ubicacionBean.ubicacion.nombre}", String.class));
        nombreCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(nombreCreateInput);
        
        Message nombreCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nombreCreateInputMessage.setId("nombreCreateInputMessage");
        nombreCreateInputMessage.setFor("nombreCreateInput");
        nombreCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nombreCreateInputMessage);
        
        OutputLabel descripcionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descripcionCreateOutput.setFor("descripcionCreateInput");
        descripcionCreateOutput.setId("descripcionCreateOutput");
        descripcionCreateOutput.setValue("Descripcion:");
        htmlPanelGrid.getChildren().add(descripcionCreateOutput);
        
        InputText descripcionCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        descripcionCreateInput.setId("descripcionCreateInput");
        descripcionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{ubicacionBean.ubicacion.descripcion}", String.class));
        descripcionCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(descripcionCreateInput);
        
        Message descripcionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descripcionCreateInputMessage.setId("descripcionCreateInputMessage");
        descripcionCreateInputMessage.setFor("descripcionCreateInput");
        descripcionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descripcionCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid UbicacionBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel nombreEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nombreEditOutput.setFor("nombreEditInput");
        nombreEditOutput.setId("nombreEditOutput");
        nombreEditOutput.setValue("Nombre:");
        htmlPanelGrid.getChildren().add(nombreEditOutput);
        
        InputText nombreEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nombreEditInput.setId("nombreEditInput");
        nombreEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{ubicacionBean.ubicacion.nombre}", String.class));
        nombreEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(nombreEditInput);
        
        Message nombreEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nombreEditInputMessage.setId("nombreEditInputMessage");
        nombreEditInputMessage.setFor("nombreEditInput");
        nombreEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nombreEditInputMessage);
        
        OutputLabel descripcionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descripcionEditOutput.setFor("descripcionEditInput");
        descripcionEditOutput.setId("descripcionEditOutput");
        descripcionEditOutput.setValue("Descripcion:");
        htmlPanelGrid.getChildren().add(descripcionEditOutput);
        
        InputText descripcionEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        descripcionEditInput.setId("descripcionEditInput");
        descripcionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{ubicacionBean.ubicacion.descripcion}", String.class));
        descripcionEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(descripcionEditInput);
        
        Message descripcionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descripcionEditInputMessage.setId("descripcionEditInputMessage");
        descripcionEditInputMessage.setFor("descripcionEditInput");
        descripcionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descripcionEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid UbicacionBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText nombreLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreLabel.setId("nombreLabel");
        nombreLabel.setValue("Nombre:");
        htmlPanelGrid.getChildren().add(nombreLabel);
        
        HtmlOutputText nombreValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreValue.setId("nombreValue");
        nombreValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{ubicacionBean.ubicacion.nombre}", String.class));
        htmlPanelGrid.getChildren().add(nombreValue);
        
        HtmlOutputText descripcionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcionLabel.setId("descripcionLabel");
        descripcionLabel.setValue("Descripcion:");
        htmlPanelGrid.getChildren().add(descripcionLabel);
        
        HtmlOutputText descripcionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcionValue.setId("descripcionValue");
        descripcionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{ubicacionBean.ubicacion.descripcion}", String.class));
        htmlPanelGrid.getChildren().add(descripcionValue);
        
        return htmlPanelGrid;
    }
    
    public Ubicacion UbicacionBean.getUbicacion() {
        if (ubicacion == null) {
            ubicacion = new Ubicacion();
        }
        return ubicacion;
    }
    
    public void UbicacionBean.setUbicacion(Ubicacion ubicacion) {
        this.ubicacion = ubicacion;
    }
    
    public String UbicacionBean.onEdit() {
        return null;
    }
    
    public boolean UbicacionBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void UbicacionBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String UbicacionBean.displayList() {
        createDialogVisible = false;
        findAllUbicacions();
        return "ubicacion";
    }
    
    public String UbicacionBean.displayCreateDialog() {
        ubicacion = new Ubicacion();
        createDialogVisible = true;
        return "ubicacion";
    }
    
    public String UbicacionBean.persist() {
        String message = "";
        if (ubicacion.getId() != null) {
            ubicacion.merge();
            message = "message_successfully_updated";
        } else {
            ubicacion.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Ubicacion");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllUbicacions();
    }
    
    public String UbicacionBean.delete() {
        ubicacion.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Ubicacion");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllUbicacions();
    }
    
    public void UbicacionBean.reset() {
        ubicacion = null;
        createDialogVisible = false;
    }
    
    public void UbicacionBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
